#!/usr/bin/env python3

"""
Writes the examples.rst file in ../src by running over the list of 
scripts in the directory ../../examples.  There are some simple 
assumptions about the structure of the files that should be adhered to
or otherwise discussed for future development.

Things that MUST be adhered to:
1. All examples must begin with a docstring briefly describing their function.
2. All default execution must be guarded by if __name__ == "__main__" :
3. CURRENTLY subdirectories of scripts are not supported.
"""

import glob


# Get the list of command line tools to document
script_list = glob.glob('../../examples/*.py')
script_list.sort()
print("Adding documentation for the following:")
print("  ",script_list)

# Open output file
out=open('examples.rst.autogen','w')

# Output preamble info
out.write(".. WARNING: DO NOT EDIT THIS FILE. IT IS OVERWRITTEN DURING DOCUMENTATION CONSTRUCTION.  SEE /docs/scripts/write_example_docs.py FOR MORE INFORMATION ABOUT THIS FILE.\n\n") 
out.write(".. module:: examples\n\n\n")

out.write(
"""
Examples
==========================================================
Some example analyses based on ngEHTforecast illustrating its capabilities and
how to make use of them are contained in the "examples" folder.  If you generate
an analysis, we encourage you to upload it with a short description of what it
does in the docstring for other ngEHTforecast users!  Please ensure that your
analysis is behind the standard __name__ check, i.e.,

::
   
   \"\"\"
   Short description of your analysis that will appear in documentation.
   \"\"\"
   
   [Top level import statements]
   
   if __name__ == \"__main__\" :
       [The bulk of your analysis code, including any outputs and
       anything that takes more than a few seconds to run.]

All Python scripts in the examples folder conforming to the above will appear in
the documentation the next time it is made!
""" + "\n\n\n"
)

# Start looping over files:
for script in script_list :

    # Check for necessary formatting:
    with open(script,'r') as f :
        lines = f.readlines()

        # Find first non-empty line
        lno = 0
        while (lno<len(lines) and (lines[lno].isspace() or lines[lno][0]=='#')) :
            lno += 1
        # print("First non-empty, non-comment line:\n",lines[lno])
        # Check for docstring
        if (lines[lno][:3] != '"""') :
            print("WARNING: Could not read %s.\n    Example source does not begin with docstring.\n"%(script))
            continue

        # Find end of docstring
        lno += 1
        while (lno<len(lines) and (not '"""' in lines[lno])) :
            lno += 1
        lno += 1
            
        # Check for first non empty, non docstring, non import line
        while (lno<len(lines) and (lines[lno].isspace() or (lines[lno][0]=='#') or ('import' in lines[lno]))) :
            lno += 1
        # print("First code line:\n",lines[lno])
        # Check for name guard
        if ( not ( ('__name__' in lines[lno]) and ('__main__' in lines[lno]) ) ) :
            print("WARNING: No __name__ guard in  %s.\n    Example source does hide execution behind a name guard.\n"%(script))
            continue
            
        
    # Get the prog name:
    prog = script.replace('../../examples/','')
    filename = '../examples/'+prog
    
    out.write('examples/'+prog+'\n')
    out.write('---------------------------------------------------\n')
    out.write('.. automodule:: examples.'+prog[:-3]+'\n')
    out.write('   :members:')
    out.write('\n\n\n')


out.close()

